name: Auto Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        default: ''

env:
  GO_VERSION: '1.21'
  APP_NAME: 'one'

jobs:
  # 测试任务
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        run: |
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --timeout=5m
          else
            echo "golangci-lint not available, skipping linting"
          fi

  # 构建任务
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
        include:
          - goos: linux
            goarch: amd64
            target: linux-amd64
          - goos: linux
            goarch: arm64
            target: linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Fetch Web Files
        run: |
          # 从 Oneinstack-Panel-Web 仓库获取前端文件
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Beta版本：获取开发版本
            curl -L https://codeload.github.com/oneinstack/Oneinstack-Panel-Web/tar.gz/refs/heads/main -o web-dist-dev.tar.gz
            tar -zxvf web-dist-dev.tar.gz
            rm -rf dist
            mv -f Oneinstack-Panel-Web-main/dist dist
            rm -rf Oneinstack-Panel-Web-main web-dist-dev.tar.gz
          else
            # 正式版本：获取发布版本
            curl -L https://github.com/oneinstack/Oneinstack-Panel-Web/releases/latest/download/dist.tar.gz -o dist.tar.gz
            tar -zxvf dist.tar.gz
            rm -rf dist
            mv -f dist dist
            rm -rf dist.tar.gz
          fi

      - name: Get version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Tag版本
            VERSION=${GITHUB_REF#refs/tags/}
            IS_TAG=true
            RELEASE_TYPE="release"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            # Main分支 - Beta版本
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="beta-$(date +%Y%m%d)-${COMMIT_HASH}"
            IS_TAG=false
            RELEASE_TYPE="beta"
          else
            # 其他分支或手动触发
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION="dev-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
            fi
            IS_TAG=false
            RELEASE_TYPE="dev"
          fi
          
          # 获取前端版本信息
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            WEB_VERSION=$(wget -qO- -t1 -T2 "https://api.github.com/repos/oneinstack/Oneinstack-Panel-Web/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' 2>/dev/null || echo "dev")
          else
            WEB_VERSION="dev"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=$IS_TAG" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT
          echo "web_version=$WEB_VERSION" >> $GITHUB_OUTPUT
          
          echo "Building version: $VERSION"
          echo "Release type: $RELEASE_TYPE"
          echo "Is tag: $IS_TAG"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -ldflags="-s -w \
            -X main.Version=${{ steps.version.outputs.version }} \
            -X main.BuildTime=${{ steps.version.outputs.build_time }} \
            -X main.CommitHash=${{ steps.version.outputs.commit_hash }} \
            -X main.WebVersion=${{ steps.version.outputs.web_version }}" \
            -o dist/${{ env.APP_NAME }}-${{ matrix.target }} ./cmd/main.go
          
          # 构建version命令
          go build -ldflags="-s -w \
            -X main.Version=${{ steps.version.outputs.version }} \
            -X main.BuildTime=${{ steps.version.outputs.build_time }} \
            -X main.CommitHash=${{ steps.version.outputs.commit_hash }} \
            -X main.WebVersion=${{ steps.version.outputs.web_version }}" \
            -o dist/${{ env.APP_NAME }}-version-${{ matrix.target }} ./cmd/version/main.go

      - name: Create package structure
        run: |
          mkdir -p packages/${{ env.APP_NAME }}-${{ matrix.target }}
          cp dist/${{ env.APP_NAME }}-${{ matrix.target }} packages/${{ env.APP_NAME }}-${{ matrix.target }}/${{ env.APP_NAME }}
          chmod +x packages/${{ env.APP_NAME }}-${{ matrix.target }}/${{ env.APP_NAME }}
          
          # Copy version command
          cp dist/${{ env.APP_NAME }}-version-${{ matrix.target }} packages/${{ env.APP_NAME }}-${{ matrix.target }}/${{ env.APP_NAME }}-version
          chmod +x packages/${{ env.APP_NAME }}-${{ matrix.target }}/${{ env.APP_NAME }}-version
          
          # Copy configuration files
          cp config.yaml packages/${{ env.APP_NAME }}-${{ matrix.target }}/
          
          # Copy installation scripts
          cp install-*.sh packages/${{ env.APP_NAME }}-${{ matrix.target }}/
          chmod +x packages/${{ env.APP_NAME }}-${{ matrix.target }}/*.sh
          
          # Copy documentation
          cp README*.md packages/${{ env.APP_NAME }}-${{ matrix.target }}/
          cp LICENSE packages/${{ env.APP_NAME }}-${{ matrix.target }}/

      - name: Create archive
        run: |
          cd packages
          tar -czf ${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}.tar.gz ${{ env.APP_NAME }}-${{ matrix.target }}
          
          # Create checksum
          sha256sum ${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}.tar.gz > ${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}.tar.gz.sha256

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}
          path: |
            packages/${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}.tar.gz
            packages/${{ env.APP_NAME }}-${{ matrix.target }}-${{ steps.version.outputs.version }}.tar.gz.sha256

  # Beta版本发布（main分支）
  beta-release:
    name: Create Beta Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="beta-$(date +%Y%m%d)-${COMMIT_HASH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz" -exec cp {} release/ \;
          find artifacts -name "*.sha256" -exec cp {} release/ \;
          
          # Create combined checksum file
          cd release
          cat *.sha256 > checksums.txt
          
          # List all files
          ls -la

      - name: Generate changelog
        id: changelog
        run: |
          # 获取最近10次提交作为changelog
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" -10)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Beta Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Beta Release - ${{ steps.version.outputs.version }}"
          files: release/*
          body: |
            ## 🚀 Beta Release - ${{ steps.version.outputs.version }}
            
            **Commit Hash**: `${{ steps.version.outputs.commit_hash }}`
            **Build Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ## 📝 Recent Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📦 Installation
            
            ### Quick Install
            ```bash
            # Download and install the latest beta
            curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
            ```
            
            ### Manual Install
            1. Download the appropriate package for your system:
               - `${{ env.APP_NAME }}-linux-amd64-${{ steps.version.outputs.version }}.tar.gz` for x86_64 systems
               - `${{ env.APP_NAME }}-linux-arm64-${{ steps.version.outputs.version }}.tar.gz` for ARM64 systems
            
            2. Extract and install:
            ```bash
            tar -xzf ${{ env.APP_NAME }}-linux-amd64-${{ steps.version.outputs.version }}.tar.gz
            cd ${{ env.APP_NAME }}-linux-amd64
            sudo ./install-ubuntu.sh  # or ./install-centos.sh
            ```
            
            ## ⚠️ Beta Notice
            
            This is a beta release and may contain experimental features or bugs. 
            Please test thoroughly before using in production.
            
            ## 🔐 Security
            
            All release files include SHA256 checksums for verification:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ## 🐛 Report Issues
            
            If you encounter any issues, please report them at:
            https://github.com/${{ github.repository }}/issues
          draft: false
          prerelease: true
          generate_release_notes: false

  # 正式版本发布（tag）
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz" -exec cp {} release/ \;
          find artifacts -name "*.sha256" -exec cp {} release/ \;
          
          # Create combined checksum file
          cd release
          cat *.sha256 > checksums.txt
          
          # List all files
          ls -la

      - name: Generate changelog
        id: changelog
        run: |
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            echo "Generating changelog from $PREVIOUS_TAG to $GITHUB_REF_NAME"
            
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: "Release ${{ steps.version.outputs.version }}"
          files: release/*
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}
            
            **Release Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ## 📝 What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📦 Installation
            
            ### Quick Install (Recommended)
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
            ```
            
            ### Manual Install
            1. Download the appropriate package for your system:
               - `${{ env.APP_NAME }}-linux-amd64-${{ steps.version.outputs.version }}.tar.gz` for x86_64 systems
               - `${{ env.APP_NAME }}-linux-arm64-${{ steps.version.outputs.version }}.tar.gz` for ARM64 systems
            
            2. Extract and install:
            ```bash
            tar -xzf ${{ env.APP_NAME }}-linux-amd64-${{ steps.version.outputs.version }}.tar.gz
            cd ${{ env.APP_NAME }}-linux-amd64
            sudo ./install-ubuntu.sh  # or ./install-centos.sh
            ```
            
            ## 🔐 Security
            
            All release files include SHA256 checksums for verification:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ## 📋 System Requirements
            
            - **OS**: CentOS 7+, Ubuntu 18.04+, Debian 9+
            - **Memory**: 512MB minimum, 1GB recommended
            - **Disk**: 1GB free space minimum
            - **Network**: Internet connection for installation
            
            ## 🆘 Support
            
            - 📖 [Documentation](https://github.com/${{ github.repository }}/wiki)
            - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
            - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          generate_release_notes: true

  # 更新安装脚本（仅正式版本）
  update-install-script:
    name: Update Install Script
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update install scripts
        run: |
          # 更新安装脚本中的版本信息
          sed -i "s/VERSION=.*/VERSION=\"${{ steps.version.outputs.version }}\"/" install.sh
          sed -i "s/VERSION=.*/VERSION=\"${{ steps.version.outputs.version }}\"/" install-ubuntu.sh
          sed -i "s/VERSION=.*/VERSION=\"${{ steps.version.outputs.version }}\"/" install-cent.sh

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add install*.sh
            git commit -m "Update install scripts for release ${{ steps.version.outputs.version }}"
            git push origin HEAD:main
          fi
