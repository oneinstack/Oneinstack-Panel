name: 🧪 Script Validation

on:
  pull_request:
    paths:
      - 'scripts/**'
      - 'tools/**'
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'tools/**'

jobs:
  detect-changes:
    name: 🔍 检测脚本变更
    runs-on: ubuntu-latest
    outputs:
      scripts: ${{ steps.changes.outputs.scripts }}
      scripts_files: ${{ steps.changes.outputs.scripts_files }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 检测变更的脚本
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            base_sha="${{ github.event.pull_request.base.sha }}"
            head_sha="${{ github.event.pull_request.head.sha }}"
          else
            base_sha="${{ github.event.before }}"
            head_sha="${{ github.sha }}"
          fi
          
          # 获取变更的脚本文件
          changed_files=$(git diff --name-only $base_sha..$head_sha | grep '^scripts/.*\.sh$' || true)
          
          if [ -n "$changed_files" ]; then
            echo "scripts=true" >> $GITHUB_OUTPUT
            echo "scripts_files<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "检测到变更的脚本文件:"
            echo "$changed_files"
          else
            echo "scripts=false" >> $GITHUB_OUTPUT
            echo "没有检测到脚本文件变更"
          fi

  syntax-check:
    name: 📝 语法检查
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: 安装 shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: 语法检查
        run: |
          echo "${{ needs.detect-changes.outputs.scripts_files }}" | while read -r script; do
            if [ -n "$script" ] && [ -f "$script" ]; then
              echo "🔍 检查脚本: $script"
              
              # Bash 语法检查
              echo "  📝 Bash 语法检查..."
              if ! bash -n "$script"; then
                echo "❌ 语法错误: $script"
                exit 1
              fi
              
              # Shellcheck 检查
              echo "  🔧 Shellcheck 检查..."
              if ! shellcheck -x "$script"; then
                echo "⚠️  Shellcheck 发现问题: $script"
                # 不因 shellcheck 警告而失败，但会显示
              fi
              
              echo "✅ $script 检查通过"
            fi
          done

  structure-validation:
    name: 📁 结构验证
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: 验证脚本结构
        run: |
          echo "${{ needs.detect-changes.outputs.scripts_files }}" | while read -r script; do
            if [ -n "$script" ] && [ -f "$script" ]; then
              echo "🔍 验证脚本结构: $script"
              
              # 检查必需的元素
              required_elements=(
                "#!/bin/bash"
                "set -euo pipefail"
                "log()"
                "main()"
                "--help"
              )
              
              missing_elements=()
              for element in "${required_elements[@]}"; do
                if ! grep -q "$element" "$script"; then
                  missing_elements+=("$element")
                fi
              done
              
              if [ ${#missing_elements[@]} -gt 0 ]; then
                echo "⚠️  脚本 $script 缺少推荐元素:"
                printf '   • %s\n' "${missing_elements[@]}"
              else
                echo "✅ $script 结构完整"
              fi
            fi
          done



  config-validation:
    name: ⚙️  配置验证
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: 安装 yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      
      - name: 验证配置文件
        run: |
          if [ -f "scripts/config.yaml" ]; then
            echo "🔍 验证配置文件格式..."
            
            # YAML 格式检查
            if yq eval '.' scripts/config.yaml >/dev/null; then
              echo "✅ 配置文件格式正确"
            else
              echo "❌ 配置文件格式错误"
              exit 1
            fi
            
            # 检查新脚本是否在配置中
            echo "${{ needs.detect-changes.outputs.scripts_files }}" | while read -r script; do
              if [ -n "$script" ] && [ -f "$script" ]; then
                script_name=$(basename "$script" .sh)
                script_dir=$(basename $(dirname "$script"))
                
                if [ "$script_dir" = "install" ]; then
                  echo "🔍 检查脚本 $script_name 是否在配置中..."
                  
                  # 这里可以添加更复杂的配置验证逻辑
                  # 例如检查脚本是否在 config.yaml 中有对应配置
                  
                  echo "ℹ️  请确保在 scripts/config.yaml 中添加了 $script_name 的配置"
                fi
              fi
            done
          else
            echo "⚠️  配置文件 scripts/config.yaml 不存在"
          fi

  security-scan:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: 安全扫描
        run: |
          echo "${{ needs.detect-changes.outputs.scripts_files }}" | while read -r script; do
            if [ -n "$script" ] && [ -f "$script" ]; then
              echo "🔒 安全扫描: $script"
              
              # 检查危险命令
              dangerous_patterns=(
                "rm -rf /"
                "chmod 777"
                "curl.*|.*sh"
                "wget.*|.*sh"
                "eval.*\$"
                "\$\(.*\)"
              )
              
              security_issues=()
              for pattern in "${dangerous_patterns[@]}"; do
                if grep -E "$pattern" "$script" >/dev/null; then
                  security_issues+=("检测到潜在危险模式: $pattern")
                fi
              done
              
              if [ ${#security_issues[@]} -gt 0 ]; then
                echo "⚠️  安全警告 $script:"
                printf '   • %s\n' "${security_issues[@]}"
                echo "请仔细检查这些模式是否安全"
              else
                echo "✅ $script 安全扫描通过"
              fi
            fi
          done

  documentation-check:
    name: 📚 文档检查
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: 检查文档完整性
        run: |
          echo "${{ needs.detect-changes.outputs.scripts_files }}" | while read -r script; do
            if [ -n "$script" ] && [ -f "$script" ]; then
              echo "📚 检查文档: $script"
              
              # 检查脚本头部信息
              required_headers=(
                "# 版本:"
                "# 作者:"
                "# 描述:"
                "# 支持系统:"
              )
              
              missing_headers=()
              for header in "${required_headers[@]}"; do
                if ! head -20 "$script" | grep -q "$header"; then
                  missing_headers+=("$header")
                fi
              done
              
              if [ ${#missing_headers[@]} -gt 0 ]; then
                echo "⚠️  脚本 $script 缺少文档信息:"
                printf '   • %s\n' "${missing_headers[@]}"
              else
                echo "✅ $script 文档完整"
              fi
            fi
          done

  pr-comment:
    name: 💬 PR 评论
    runs-on: ubuntu-latest
    needs: [syntax-check, structure-validation, config-validation, security-scan, documentation-check]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.scripts == 'true'
    steps:
      - name: 创建 PR 评论
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            const comment = `## 🧪 脚本验证结果
            
            您的脚本提交已通过自动化验证！
            
            ### ✅ 完成的检查
            - 📝 语法检查
            - 📁 结构验证  
            - ⚙️  配置验证
            - 🔒 安全扫描
            - 📚 文档检查
            
            ### 📋 下一步
            1. 请确保在 \`scripts/config.yaml\` 中添加了新脚本的配置
            2. 考虑添加脚本的使用示例和说明
            3. 如有安全警告，请仔细检查并确认安全性
            
            ### 🎉 贡献感谢
            感谢您为 Oneinstack Panel 项目贡献脚本！您的贡献让项目变得更强大。
            
            ---
            *此评论由自动化工作流生成*`;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: comment
            });

  summary:
    name: 📊 验证总结
    runs-on: ubuntu-latest
    needs: [syntax-check, structure-validation, config-validation, security-scan, documentation-check]
    if: always() && needs.detect-changes.outputs.scripts == 'true'
    steps:
      - name: 验证总结
        run: |
          echo "## 🧪 脚本验证总结"
          echo ""
          echo "| 检查项 | 状态 |"
          echo "|--------|------|"
          echo "| 语法检查 | ${{ needs.syntax-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |"
          echo "| 结构验证 | ${{ needs.structure-validation.result == 'success' && '✅ 通过' || '❌ 失败' }} |"
          echo "| 配置验证 | ${{ needs.config-validation.result == 'success' && '✅ 通过' || '❌ 失败' }} |"
          echo "| 安全扫描 | ${{ needs.security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} |"
          echo "| 文档检查 | ${{ needs.documentation-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |"
          
          if [[ "${{ needs.syntax-check.result }}" == "success" && 
                "${{ needs.structure-validation.result }}" == "success" ]]; then
            echo ""
            echo "🎉 所有关键检查通过！脚本质量良好。"
            exit 0
          else
            echo ""
            echo "❌ 部分检查失败，请查看详细日志进行修复。"
            exit 1
          fi
